{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "EMCL",
	"scopeName": "source.emcl",
	"foldingStartMarker": "\\{\\s*$",
	"foldingStopMarker": "^\\s*\\}",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#identifier"
		},
		{
			"include": "#misc"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"comment": "Regular comment",
					"match": "\\/\\/.*$",
					"name": "comment.line.double-slash.emcl"
				},
				{
					"comment": "Multiline comment",
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.emcl"
				},
				{
					"comment": "MC-Function Style comment",
					"match": "#.*$",
					"name": "comment.line.number-sign.emcl"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"comment": "String Literal (Double Quote)",
					"match": "\"(?:\\\\.|[^\\\\\"])*\"",
					"name": "string.quoted.double.emcl"
				},
				{
					"comment": "String Literal (Single Quote)",
					"match": "'(?:\\\\.|[^\\\\'])*'",
					"name": "string.quoted.single.emcl"
				},
				{
					"comment": "Int Literal",
					"match": "\\d+",
					"name": "constant.numeric.emcl"
				},
				{
					"comment": "Float Literal",
					"match": "(?:\\d*\\.\\d+)f?",
					"name": "constant.numeric.emcl"
				},
				{
					"comment": "Boolean Literal",
					"match": "\\b(?:true|false)\\b",
					"name": "constant.language.emcl"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "Control flow",
					"match": "\\b(?:mccommand|mcsubcommand|import|for|while|if|else|execute)\\b",
					"name": "keyword.control.emcl"
				},
				{
					"comment": "Definition",
					"match": "\\b(?:mcfunction|alias)\\b",
					"name": "storage.type.emcl"
				},
				{
					"comment": "Storage target",
					"match": "\\b(?:score|nbt)\\b",
					"name": "storage.type.emcl"
				},
				{
					"comment": "Data types",
					"match": "\\b(?:int|float|bool|void|string|char)\\b",
					"name": "storage.type.emcl"
				},
				{
					"comment": "Data type modifier",
					"match": "\\b(?:const)\\b",
					"name": "storage.modifier.emcl"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"comment": "Punctuation",
					"match": "\\+=|-=|\\*=|\\/=|%=|\\+\\+|--|\\*|\/|%|\\+|-|<=|>=|<|>|==|!=|&&|\\|\\||=|;|,|:|{|}|(|)|\\[|\\]",
					"name": "punctuation"
				}
			]
		},
		"identifier": {
			"patterns": [
				{
					"comment": "Identifier",
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "variable"
				}
			]
		},
		"misc": {
			"patterns": [
				{
					"comment": "MCCommand Literal",
					"match": "\\/\\w[^\\n;]+",
					"name": "string.unquoted.emcl"
				}
			]
		}
	}
}
